#ifndef FORWARD_ITERATOR_HPP
# define FORWARD_ITERATOR_HPP

#include "input_iterator.hpp"
#include <type_traits>

namespace ft
{
	template <class T, class Distance = ptrdiff_t, class Pointer = T*, class Reference = T& >
	class forward_iterator : public input_iterator<T, Distance, Pointer, Reference>
	{
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Input_iterator instanciated type
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		private:
			typedef input_iterator<T, Distance, Pointer, Reference> _input_iterator;
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Input_iterator instanciated type End
		/////////////////////////////////////////////////////////////////////////////////////////////////////


		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Constructors, assignment operators, and destructors
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		private:
			forward_iterator(Pointer ptr) : _input_iterator(ptr)
			{
			}
		

		public:
			forward_iterator() : _input_iterator()
			{
			}

			forward_iterator(const forward_iterator& src) : _input_iterator(src._ptr)
			{
			}

			forward_iterator	&operator=(const forward_iterator& rop)
			{
				if (this == &rop)
					return *this;
				_input_iterator::_ptr = rop._ptr;
				return *this;
			}

			~forward_iterator()
			{
			}
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Constructors, assignment operators, and destructors End
		/////////////////////////////////////////////////////////////////////////////////////////////////////


		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Arithmetic operators
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		public:
			forward_iterator	&operator++()
			{
				_input_iterator::_ptr++;
				return *this;
			}

			forward_iterator	operator++(int n)
			{
				forward_iterator	ret(*this);

				_input_iterator::_ptr++;
				return ret;
			}
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Arithmetic operators End
		/////////////////////////////////////////////////////////////////////////////////////////////////////
	};
}

#endif