templates:

-   template class : instantiation of a class template
-   template function : instantiation of a function template

concepts:
-	generic function = function template
-	generated function = template function = instantiated function = function (template) instance





calling a template function :
	-   foo<types>(args)
		does not look for explicit specific functions written in the old style.
	-   foo<>(args)
		deduces the right specific function to call. It does not look for explicit 
		specific functions written in the old style.
	-   foo(args)
		deduces the right specific function to call (explicit specific functions are included).


-	Template definitions are not subject to the one-definition rule, and functions instantiated from function 
	templates are implicitly inline, so they are exempt from the one-definition rule.


abbreviated function template :
	-	When the auto keyword is used as a parameter type in a normal function, the compiler will
		automatically convert the function into a function template with each auto parameter becoming
		an independent template type parameter
	-	Ex : auto foo(auto a, auto b);


Non-type parameters:
	-	Ex: template<typename T, int var) --> var is a non-type parameter (can't have default value untill c++11)
	-	A non-type template-parameter shall have one of the following (optionally cv-qualified) types:
		—	integral or enumeration type,
		—	pointer to a global object or function,
		—	reference to a global object or function,
		—	pointer to member (argument must be expressed as &Class::Member)
		-	std::nullptr_t
		-	A floating point type(since C++20)
	-	Thus, non-type parameters should themselves be thought of as constants, since their values cannot be changed.

-	default template arguments for a function template are a C++11 extension;

template member definition:
	-	Each templated member function defined outside the class declaration needs its own template declaration.
	-	when defining a member function of a class template outside of the class, the use of type<> for scope is mandatory.
	Ex :
		-	template <typename T> void array<t>::getSize(){}; //valid
		-	template <typename T> void array::getSize(){}; //invalid --> refers to a non-template class array


-	a specialized member function must specialize an explicit function (not one that the compiler is providing a
	default for, Ex: ctors)


*	default parameters, when not specified, are deduced first, then happens the lookup.
	Ex : partialSpecDefault.cpp


-	full template specialization : specify all template parameters.
	Ex :
	-	function template : template <typename T, typename U> void show(T s, U del, int size){};
	-	specialization : template <> void show(string s, char del, int size){};

template instantiation
================================
*	template instantiation : tells the compiler when it should generate a definition from a template.

*	template instantiation :
	-	implicit : through a function  call
	Ex :	-	f(12.3)	--> implicit instantiation
	-	explicit : through creating functions (with specific types) from function templates.
	Ex :	-	template<> f<int>(int arg);
			-	template<> struct cl<int>;
			
//----
*	The explicit instantiation declarations feature is introduced in the C++11 standard.
	With this feature, you can suppress the implicit instantiation of a template specialization or its members.
*	An explicit instantiation definition is an instantiation of a template specialization or a its members.

explicit template instantiation : tells the compiler : do not bother generating this code, because. i defined it somewhere else.
	*	explicit template instantiation declaration : extern template<> class cl<int>;
	*	explicit template instantiation definition : template<> class cl<int>;

*	declaration (needs to be visible) requirement only :
	-	function template
	-	member function or static data member of a class template
	-	member function template
*	definition requirement (unless an explicit specialization with the same template arguments appeared before):
	-	class template
	-	member class of a class template
	-	member class template

*	the template definition must be present in the same translation unit when an explicit instantiation defintion of :
	-	function template
	-	member function template
	-	member function or static data member of a class template


Member function templates
================================
*	A member function template cannot be virtual.
*	A member function template in a derived class cannot override a virtual member function from the base class.
	the base class one will be chosen.


partial template specialization
================================
-	partial template specialization : specify some (but not all) template parameters. Possible only for classes.
	*	Ex:
		-	class template : template<class T1, class T2, class T3 = int> class A {};
		-	specialization : template <typename T> void show(T s, char del, int size){};

	*	The argument list restrictions:
		-	The argument list cannot be identical to the non-specialized argument list (it must specialize something).
		-	Default arguments cannot appear in the argument list.
		-	If any argument is a pack expansion (typename ...types), it must be the last argument in the list.
		-	Non-type argument expressions can use template parameters as long as the parameter appears at least
			once outside a non-deduced context (note that only clang supports this feature currently)
		-	Non-type template argument cannot specialize a template parameter whose type depends
			on a parameter of the specialization.
	*	Name lookup: Only if the primary template is found by name lookup, its partial specializations are considered.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using NewTypeName = typeName;    ---> tyepedef typeName NewTypeName;




Member template :
	-   member function template.
	-   nested class template.


-   Local classes are not allowed to have member templates.


-   Member template functions cannot be virtual functions and cannot override virtual 
	functions from a base class when they are declared with the same name as a base class 
	virtual function.

typeof : a Gcc extension that work like typeid but just at compile-time.


-   