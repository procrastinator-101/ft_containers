#ifndef INPUT_ITERATOR_HPP
# define INPUT_ITERATOR_HPP

#include <type_traits>

namespace ft
{
	template <class T, class Distance = ptrdiff_t, class Pointer = T*, class Reference = T& >
	class input_iterator
	{
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Data members
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		private:
			Pointer	_ptr;
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Data members End
		/////////////////////////////////////////////////////////////////////////////////////////////////////


		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Constructors, assignment operators, and destructors
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		private:
			input_iterator(Pointer ptr) : _ptr(ptr)
			{
			}


		public:
			input_iterator(const input_iterator& src) : _ptr(src._ptr)
			{
			}

			input_iterator	&operator=(const input_iterator& rop)
			{
				if (this == &rop)
					return *this;
				_ptr = rop._ptr;
				return *this;
			}

			~input_iterator()
			{
			}
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Constructors, assignment operators, and destructors End
		/////////////////////////////////////////////////////////////////////////////////////////////////////


		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Comparison operators
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		public:
			bool	operator==(const input_iterator& rop)
			{
				return _ptr == rop._ptr;
			}

			bool	operator!=(const input_iterator& rop)
			{
				return _ptr != rop._ptr;
			}
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Comparison operators End
		/////////////////////////////////////////////////////////////////////////////////////////////////////

		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Arithmetic operators
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		public:
			input_iterator	&operator++()
			{
				_ptr++;
				return *this;
			}

			input_iterator	operator++(int n)
			{
				input_iterator	ret(*this);

				_ptr++;
				return ret;
			}
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Arithmetic operators End
		/////////////////////////////////////////////////////////////////////////////////////////////////////


		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Derefrence operators
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		public:
			Pointer	operator->()
			{
				return _ptr;
			}

			T	&operator*()
			{
				return *_ptr;
			}
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Derefrence operators End
		/////////////////////////////////////////////////////////////////////////////////////////////////////
	};
}

#endif