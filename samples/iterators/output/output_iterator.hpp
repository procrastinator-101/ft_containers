#ifndef OUTPUT_ITERATOR_HPP
# define OUTPUT_ITERATOR_HPP

#include <iterator>
#include <type_traits>

namespace ft
{
	template <class T, class Distance = ptrdiff_t, class Pointer = T*, class Reference = T& >
	class output_iterator
	{
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Data members
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		protected:
			Pointer	_ptr;
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Data members End
		/////////////////////////////////////////////////////////////////////////////////////////////////////


		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Constructors, assignment operators, and destructors
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		public:
			output_iterator() : _ptr(0)
			{
			}

			output_iterator(Pointer ptr) : _ptr(ptr)
			{
			}

			output_iterator(const output_iterator& src) : _ptr(src._ptr)
			{
			}

			output_iterator	&operator=(const output_iterator& rop)
			{
				if (this == &rop)
					return *this;
				_ptr = rop._ptr;
				return *this;
			}

			~output_iterator()
			{
			}
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Constructors, assignment operators, and destructors End
		/////////////////////////////////////////////////////////////////////////////////////////////////////


		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Arithmetic operators
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		public:
			output_iterator	&operator++()
			{
				_ptr++;
				return *this;
			}

			output_iterator	operator++(int n)
			{
				output_iterator	ret(*this);

				_ptr++;
				(void)n;
				return ret;
			}
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Arithmetic operators End
		/////////////////////////////////////////////////////////////////////////////////////////////////////


		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Derefrence operators
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		public:
			Pointer	operator->() const
			{
				return _ptr;
			}

			T	&operator*() const
			{
				return *_ptr;
			}
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Derefrence operators End
		/////////////////////////////////////////////////////////////////////////////////////////////////////
	};
}

#endif