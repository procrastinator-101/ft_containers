*	Dereferenceable iterators : Iterators for which the behavior of the expression *i is defined are called dereferenceable.
*	Incrementable iterators : Iterators for which the behavior of the expression ++i is defined are called incrementable.

*	Iterators are not dereferenceable if

	-	they are past-the-end iterators (including pointers past the end of an array) or before-begin iterators.
	-	they are singular iterators, that is, iterators that are not associated with any sequence. 
		A null pointer, as well as a default-constructed pointer (holding an indeterminate value) is singular
	-	they were invalidated by one of the iterator-invalidating operations on the sequence to which they refer.


*	Input iterator:
	-	can be dereferenced any number of times.
	-	once a LegacyInputIterator i has been incremented, all copies of its previous value may be 
		invalidated (i.e dereferenceable and incrementable).

*	Output iterator:
	-	can be dereferenced only once. It has to be incremented to be dereferenced again.
	-	once a LegacyOutputIterator i has been incremented or dereferenced, all copies of its previous value may be invalidated.